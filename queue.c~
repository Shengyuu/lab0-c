/*
 * Code for basic C skills diagnostic.
 * Developed for courses 15-213/18-213/15-513 by R. E. Bryant, 2017
 * Modified to store strings, 2018
 */

/*
 * This program implements a queue supporting both FIFO and LIFO
 * operations.
 *
 * It uses a singly-linked list to represent the set of queue elements
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "harness.h"
#include "queue.h"

/*
  Create empty queue.
  Return NULL if could not allocate space.
*/
queue_t *q_new()
{
    queue_t *q = malloc(sizeof(queue_t));
    /* What if malloc returned NULL? */
    if (!q)
        return NULL;
    else {
        q->head = NULL;
        q->tail = NULL;
        q->size = 0;
        return q;
    }
}

/* Free all storage used by queue */
void q_free(queue_t *q)
{
    /* How about freeing the list elements and the strings? */
    if(q){
         list_ele_t *tmp = q->head;
        while (q->head) {
            if (q->head->value) free(q->head->value);//avoid free NULL
            q->head = q->head->next;
            free(tmp);
            tmp = q->head;
        }
    

    /* Free queue structure */
    free(q);
    }
}

/*
  Attempt to insert element at head of queue.
  Return true if successful.
  Return false if q is NULL or could not allocate space.
  Argument s points to the string to be stored.
  The function must explicitly allocate space and copy the string into it.
 */
bool q_insert_head(queue_t *q, char *s)
{

    if(!q){
        printf("queue is NULL\n");
        return false;
    }
    /* What should you do if the q is NULL, malloc is NULL and s is NULL? */
    list_ele_t *newh = malloc(sizeof(list_ele_t));

    if (!newh) {
        printf("Fail to allocate list\n");
        return false;
    }
    newh->value = malloc(strlen(s) + 1);
    if(!newh->value) {
        printf("Fail to allocate value\n");
        free(newh);
        return false;
    }
    /* Don't forget to allocate space for the string and copy it */
    strcpy(newh->value, s);

    if (q->size == 0) {
        newh->next = NULL;
        q->size++;
        q->head = newh;
        q->tail = newh;
        return true;
    } else {
        newh->next = q->head;
        q->head = newh;
        q->size++;
        return true;
    }
}


/*
  Attempt to insert element at tail of queue.
  Return true if successful.
  Return false if q is NULL or could not allocate space.
  Argument s points to the string to be stored.
  The function must explicitly allocate space and copy the string into it.
 */
bool q_insert_tail(queue_t *q, char *s)
{
    /* You need to write the complete code for this function */
    /* Remember: It should operate in O(1) time */
    if(!q) {
        printf("The queue is NULL\n");
        return false;
    }
    list_ele_t *newt =(list_ele_t*)malloc(sizeof(list_ele_t));
    if (!newt ) { 
        printf("Fail to allocate list\n");
        return false;
    }
    newt->value = malloc(strlen(s) + 1);
    if(!newt->value) {
        printf("Fail to allocate value\n");
        free (newt);
        return false;
    }

    strcpy(newt->value, s);

    if (!q->size) {
        q->size++;
        newt->next = NULL;
        q->head = newt;
        q->tail = newt;
        return true;
    } else {
        q->size++;
        newt->next = NULL;
        q->tail->next = newt;
        q->tail = newt;//error
        return true;
    }
}

/*
  Attempt to remove element from head of queue.
  Return true if successful.
  Return false if queue is NULL or empty.
  If sp is non-NULL and an element is removed, copy the removed string to *sp
  (up to a maximum of bufsize-1 characters, plus a null terminator.)
  The space used by the list element and the string should be freed.
*/
bool q_remove_head(queue_t *q, char *sp, size_t bufsize)
{
    /* You need to fix up this code. */
    if(!q){
        printf("The queue is NULL\n");
        return false;
    }
    if(!q->head){
        printf("The head is NULL\n");
        return false;
    }
    if(!sp){
        printf("sp is NULL\n");
    }
    if(sp) {
        strncpy(sp, q->head->value, bufsize - 1);
        sp[bufsize - 1] ='\0';

    }
        if (q->size == 1) {
        q->size--;
        free(q->head->value);
        free(q->head);
        //free(q->tail);
        q->head = NULL;
        q->tail = NULL;
        //free(q->tail->value);
        //free(q->tail);
        return true;
    } else {
        list_ele_t *tmp = q->head;
        q->size--;
        q->head = q->head->next;
        free(tmp->value);
        free(tmp);
        return true;
    }
}

/*
  Return number of elements in queue.
  Return 0 if q is NULL or empty
 */
int q_size(queue_t *q)
{
    /* You need to write the code for this function */
    /* Remember: It should operate in O(1) time */
    if(!q) return false;
    return q->size;
}

/*
  Reverse elements in queue
  No effect if q is NULL or empty
  This function should not allocate or free any list elements
  (e.g., by calling q_insert_head, q_insert_tail, or q_remove_head).
  It should rearrange the existing ones.
 */
void q_reverse(queue_t *q)
{
    if(!q){
        printf("The queue is NULL\n");
    }
    else{
        printf("in the reverse\n");
        int count = q->size;
        if(count > 0)   {

        q->tail = q->head;


        list_ele_t *tmp_ele ;/*= malloc(sizeof(list_ele_t));*///malloc or not
        //if(tmp_ele){
        list_ele_t *tmp_ele_next;
        tmp_ele = NULL;
        while(count > 0){
        //printf("count > 0  %d\n",count);
            tmp_ele_next = tmp_ele;
            //printf("1\n");
            tmp_ele = q->head;
            //printf("2\n");
            //printf("%p\n",q->head);
            q->head = q->head->next;
            //printf("3\n");
            tmp_ele->next = tmp_ele_next;
            //printf("4\n");
            count--;
        }


        q->tail->next = NULL;
        q->head = tmp_ele;
        //free(tmp_ele);
        //}
    }
        else printf("queue is empty\n");
    }

    /* You need to write the code for this function */
}
